{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../../message.service\";\nexport class LoginService {\n  constructor(http, messageService) {\n    this.http = http;\n    this.messageService = messageService;\n    this.baseUrl = 'http://127.0.0.1:5000/getRecommendedEventsForUser'; // URL to web api\n    this.httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      })\n    };\n  }\n  /** GET heroes from the server */\n  // getUsers(): Observable<User[]> {\n  //   return this.http.get<User[]>(this.baseUrl+\"/\")\n  //     .pipe(\n  //        tap(_ => this.log('fetched users')),\n  //       catchError(this.handleError<User[]>('getUsers', []))\n  //     );\n  // }\n  // getRecommendedEvents(event: Event): Observable<Event[]> {\n  //   const url = `${this.baseUrl}/${event}`;\n  //   return this.http.get<Event[]>(url, {params:event}).pipe(\n  //     tap(_ => this.log(`fetched hero id=${event}`)),\n  //     catchError(this.handleError<Event[]>(`getRecommendedEvents id=${event}`))\n  //   );\n  // }\n  getRecommendedEvents(event) {\n    const url = `${this.baseUrl}/${JSON.stringify(event)}`;\n    return this.http.get(url, this.httpOptions);\n  }\n  /**\r\n  * Handle Http operation that failed.\r\n  * Let the app continue.\r\n  *\r\n  * @param operation - name of the operation that failed\r\n  * @param result - optional value to return as the observable result\r\n  */\n  handleError(operation = 'operation', result) {\n    return error => {\n      // TODO: send the error to remote logging infrastructure\n      console.error(error); // log to console instead\n      // TODO: better job of transforming error for user consumption\n      this.log(`${operation} failed: ${error.message}`);\n      // Let the app keep running by returning an empty result.\n      return of(result);\n    };\n  }\n  /** Log a HeroService message with the MessageService */\n  log(message) {\n    this.messageService.add(`HeroService: ${message}`);\n  }\n}\nLoginService.ɵfac = function LoginService_Factory(t) {\n  return new (t || LoginService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MessageService));\n};\nLoginService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LoginService,\n  factory: LoginService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAmB,sBAAsB;AACzE,SAAqBC,EAAE,QAAQ,MAAM;;;;AAUrC,OAAM,MAAOC,YAAY;EAQvBC,YACUC,IAAgB,EAChBC,cAA8B;IAD9B,SAAI,GAAJD,IAAI;IACJ,mBAAc,GAAdC,cAAc;IAThB,YAAO,GAAG,mDAAmD,CAAC,CAAE;IACxE,gBAAW,GAAG;MACZC,OAAO,EAAE,IAAIN,WAAW,CAAC;QACvB,cAAc,EAAE,kBAAkB;QAClC,6BAA6B,EAAC;OAC/B;KACF;EAKE;EAGH;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;EAIAO,oBAAoB,CAACC,KAAY;IAC/B,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACC,OAAO,IAAIC,IAAI,CAACC,SAAS,CAACJ,KAAK,CAAC,EAAE;IACtD,OAAO,IAAI,CAACJ,IAAI,CAACS,GAAG,CAAUJ,GAAG,EAAC,IAAI,CAACK,WAAW,CAAC;EACrD;EAEE;;;;;;;EAOQC,WAAW,CAAIC,SAAS,GAAG,WAAW,EAAEC,MAAU;IACxD,OAAQC,KAAU,IAAmB;MAEnC;MACAC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAAC,CAAC;MAEtB;MACA,IAAI,CAACE,GAAG,CAAC,GAAGJ,SAAS,YAAYE,KAAK,CAACG,OAAO,EAAE,CAAC;MAEjD;MACA,OAAOpB,EAAE,CAACgB,MAAW,CAAC;IACxB,CAAC;EACL;EAEE;EACQG,GAAG,CAACC,OAAe;IACzB,IAAI,CAAChB,cAAc,CAACiB,GAAG,CAAC,gBAAgBD,OAAO,EAAE,CAAC;EACpD;;AAhESnB,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAqB,SAAZrB,YAAY;EAAAsB,YAFX;AAAM","names":["HttpHeaders","of","LoginService","constructor","http","messageService","headers","getRecommendedEvents","event","url","baseUrl","JSON","stringify","get","httpOptions","handleError","operation","result","error","console","log","message","add","factory","providedIn"],"sourceRoot":"","sources":["C:\\MeghasWork\\brickhack\\eventify-demo\\src\\app\\login\\login.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders,HttpParams } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, tap } from 'rxjs/operators';\r\nimport { LoginComponent } from './login.component';\r\nimport { User } from '../Models/User';\r\nimport { Event } from '../Models/Event';\r\nimport { MessageService } from '../../message.service'\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LoginService {\r\n  private baseUrl = 'http://127.0.0.1:5000/getRecommendedEventsForUser';  // URL to web api\r\n  httpOptions = {\r\n    headers: new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'Access-Control-Allow-Origin':'*',\r\n    })\r\n  };\r\n  constructor(\r\n    private http: HttpClient,\r\n    private messageService: MessageService,\r\n    \r\n  ) {}\r\n  \r\n\r\n  /** GET heroes from the server */\r\n  // getUsers(): Observable<User[]> {\r\n  //   return this.http.get<User[]>(this.baseUrl+\"/\")\r\n  //     .pipe(\r\n  //        tap(_ => this.log('fetched users')),\r\n  //       catchError(this.handleError<User[]>('getUsers', []))\r\n  //     );\r\n  // }\r\n\r\n\r\n  // getRecommendedEvents(event: Event): Observable<Event[]> {\r\n  //   const url = `${this.baseUrl}/${event}`;\r\n  //   return this.http.get<Event[]>(url, {params:event}).pipe(\r\n  //     tap(_ => this.log(`fetched hero id=${event}`)),\r\n  //     catchError(this.handleError<Event[]>(`getRecommendedEvents id=${event}`))\r\n  //   );\r\n  // }\r\n\r\n\r\n  \r\n  getRecommendedEvents(event: Event): Observable<Event[]> {\r\n    const url = `${this.baseUrl}/${JSON.stringify(event)}`;\r\n    return this.http.get<Event[]>(url,this.httpOptions);\r\n  }\r\n\r\n    /**\r\n   * Handle Http operation that failed.\r\n   * Let the app continue.\r\n   *\r\n   * @param operation - name of the operation that failed\r\n   * @param result - optional value to return as the observable result\r\n   */\r\n    private handleError<T>(operation = 'operation', result?: T) {\r\n      return (error: any): Observable<T> => {\r\n  \r\n        // TODO: send the error to remote logging infrastructure\r\n        console.error(error); // log to console instead\r\n  \r\n        // TODO: better job of transforming error for user consumption\r\n        this.log(`${operation} failed: ${error.message}`);\r\n  \r\n        // Let the app keep running by returning an empty result.\r\n        return of(result as T);\r\n      };\r\n  }\r\n  \r\n    /** Log a HeroService message with the MessageService */\r\n    private log(message: string) {\r\n      this.messageService.add(`HeroService: ${message}`);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}